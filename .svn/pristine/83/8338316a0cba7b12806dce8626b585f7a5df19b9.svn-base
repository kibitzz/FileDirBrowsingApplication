using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FileExplorerApp.Common.Models;
using FileExplorerApp.ViewModels;
using FileExplorerApp.Repository;
using FileExplorerApp.Entities;

namespace FileExplorerApp.Core.Services.Impl
{
    public class DirectoryBrowserService : IDirectoryBrowserService
    {

        private readonly IFileSystem _worker;

        public string currentPath;
       
        public DirectoryBrowserService(IFileSystem worker)
        {           
            _worker = worker;
        }

        public RequestResult<List<DirectoryItem>> GetDirContent(PathContentRequestModel request)
        {

            string path = request.FullPath;
            path = path.TrimEnd(((char)92));
            //currentPath used to form fullPath property in FileDirToDirectoryItem convertor
            currentPath = path.Replace("root", "");
            currentPath +=  (string.IsNullOrWhiteSpace(currentPath) ? "" : @"\");

            if (path.EndsWith(":"))
            {
                path += @"\";
            }

            if (!_worker.PathExists(path))
            {
                return new RequestResult<List<DirectoryItem>>(RequestResultStatus.Error, null, "Such directory does not exist");
            }

            List<DirectoryItem> items = new List<DirectoryItem>();
            DirectoryItem parentDirItem = new DirectoryItem();
            parentDirItem.FullPath = _worker.GetParentDirectory(path);
            parentDirItem.Name = "...";
            parentDirItem.isDir = true;
            if (!string.IsNullOrWhiteSpace(parentDirItem.FullPath))
            {
                items.Add(parentDirItem);
            }

            try
            {
                items.AddRange(_worker.GetDirectorySubDirs(path).ConvertAll(new Converter<FileDir, DirectoryItem>(FileDirToDirectoryItem)));
                items.AddRange(_worker.GetDirectoryFiles(path).ConvertAll(new Converter<FileDir, DirectoryItem>(FileDirToDirectoryItem)));
            } catch (UnauthorizedAccessException)
            {
                return new RequestResult<List<DirectoryItem>>(RequestResultStatus.Error, items, "You have no access to this directory");
            }

            return new RequestResult<List<DirectoryItem>>(RequestResultStatus.Success, items, "worker instance " + _worker.instanceIdx.ToString());
        }

        public DirectoryItem FileDirToDirectoryItem(FileDir pf)
        {
            DirectoryItem rez = new DirectoryItem();
            rez.Name = pf.Name;
            rez.isDir = pf.isDir;
            rez.FullPath = currentPath + pf.Name;
            return rez;
        }

        public RequestResult<DirectoryStat> GetDirStatistics(string path)
        {
            if (!_worker.PathExists(path))
            {
                return new RequestResult<DirectoryStat>(RequestResultStatus.Error, null, "Such directory does not exist");
            }

            path = path.TrimEnd(((char)92));
            currentPath = path;          
            if (path.EndsWith(":"))
            {
                path += @"\";
            }
            DirectoryStat ds = new DirectoryStat();
            //recursive subdirectory analysis
            GetDirStatistics(path, ds);

            return new RequestResult<DirectoryStat>(RequestResultStatus.Success, ds, "worker instance " + _worker.instanceIdx.ToString());
        }

        public void GetDirStatistics(string path, DirectoryStat ds)
        {
            string contextPath = currentPath;
            long mega = 1048576;         
            try
            {
                List<FileDir> files = _worker.GetDirectoryFiles(path);
                ds.Less10mb += EnumFileDirByCriteria(files, 0, 10 * mega);
                ds.Range10_50mb += EnumFileDirByCriteria(files, 10 * mega, 50 * mega);
                ds.More100mb += EnumFileDirByCriteria(files, 100 * mega, long.MaxValue);
            }
            catch (UnauthorizedAccessException)
            {
                ds.Info += "| Inaccessible [" + path + "]";
                return;
            }

            if (contextPath != currentPath)
            { ds.FullPath += " ### break"; return; }

            //try
            //{
                List<FileDir> subd = _worker.GetDirectorySubDirs(path);
                foreach (FileDir d in subd)
                {
                    if (contextPath != currentPath)
                    {
                    ds.FullPath += " ### break" ;
                    break; }
                    GetDirStatistics(path + @"\" + d.Name, ds);
                }
            //}
            //catch (Exception)
            //{

            //    throw;
            //}
           
        }

        public int EnumFileDirByCriteria(List<FileDir> files, long greater, long less)
        {
            int rez = 0;

            foreach (FileDir f in files)
            {             
                if (f.Length > greater && f.Length < less)
                {
                    rez++;
                }
            }

            return rez;
        }

    }
}
